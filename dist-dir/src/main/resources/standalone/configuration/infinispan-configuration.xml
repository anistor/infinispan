<?xml version="1.0" encoding="UTF-8"?>

<infinispan
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="urn:infinispan:config:4.2 http://www.infinispan.org/schemas/infinispan-config-4.2.xsd"
      xmlns="urn:infinispan:config:4.2">

   <!-- Detailed configuration information can be found in http://docs.jboss.org/infinispan/4.2/apidocs -->

   <global>

      <!--
      Expose global, cache manager level, statistics
      -->
      <globalJmxStatistics enabled="true" jmxDomain="infinispan" />

      <transport clusterName="DataGridPartition">
         <properties>
            <property name="configurationFile"
                      value="${jboss.server.base.dir}/configuration/jgroups-datagrid-udp.xml"
                      />
         </properties>
      </transport>

      <!--
      Executor settings for when asynchronous replication with replication queue is used

      <replicationQueueScheduledExecutor factory="org.infinispan.executors.DefaultSharedScheduledExecutorFactory">
         <properties>
            <property name="maxThreads"
                      value="1"
                      />
            <property name="threadNamePrefix"
                      value="replicationQueue-thread"
                      />
         </properties>
      </replicationQueueScheduledExecutor>
      -->

      <!--
      Executor settings for when asynchronous marshalling has been enabled

      <asyncTransportExecutor factory="org.infinispan.executors.DefaultSharedExecutorFactory">
         <properties>
            <property name="maxThreads"
                      value="25"
                      />
            <property name="threadNamePrefix"
                      value="transport-thread"
                      />
         </properties>
      </asyncTransportExecutor>
      -->

      <!--
      Executor settings for eviction has been configured in the cache

      <evictionScheduledExecutor factory="org.infinispan.executors.DefaultSharedScheduledExecutorFactory">
         <properties>
            <property name="threadNamePrefix"
                      value="eviction-thread"
                      />
         </properties>
      </evictionScheduledExecutor>
      -->

   </global>

   <!--
   Default cache configuration. Memcached clients can only interact against this cache.
   Hot Rod and REST clients can interact against the default or one of the named caches.
   -->
   <default>

      <!--
      READ_COMMITTED is the only relevant isolation level for the data grid
      Adjust concurrency level according to number of concurrent threads interacting with the cache
      -->
      <locking isolationLevel="READ_COMMITTED"
               lockAcquisitionTimeout="20000"
               concurrencyLevel="500"
               useLockStriping="false"
               />

      <!--
      Expose cache level statistics
      -->
      <jmxStatistics enabled="true"/>

      <!--
      This element specifies that the cache is clustered.
      modes supported: distribution (d), replication (r) or invalidation (i).
      -->
      <clustering mode="distribution">

         <!--
         Network calls are synchronous.
         -->
         <sync replTimeout="20000"/>

         <!--
         numOwners: number of owners for each key.  The larger this number is, the safer your data will be, but the
                     slower the cluster will be.

         rehashRpcTimeout: timeout used for RPC calls relating to rehashing.  This defaults to 600000 (10 minutes).
         -->
         <hash numOwners="2" rehashWait="120000" rehashRpcTimeout="600000"/>

         <!--
         L1 cache enables more efficient reads in those nodes that don't own the data
         The lifespan, defined in milliseconds, indicates how long data should live in L1
         -->
         <l1 enabled="true"
             lifespan="600000"
             />

      </clustering>

      <!--
         Eviction configuration.

         WakeupInterval defines how often the eviction thread runs, in milliseconds.
         0 means the eviction thread will never run.  
      -->
      <eviction wakeUpInterval="500"
                maxEntries="5000"
                strategy="LIRS"
                />

      <!--
      Expiration configuration allows you to limit how long each cache entry should live for.

      <expiration lifespan="60000"
                  maxIdle="1000"
                  />
      -->

   </default>

   <namedCache name="sampleReplicatedCache">

      <clustering mode="replication">

         <!--
         Defines whether to retrieve state on startup
         -->
         <stateRetrieval timeout="20000"
                         fetchInMemoryState="false"
                         alwaysProvideInMemoryState="false"
                         />

         <!--
         Asynchronous replication with a replication queue that is flushed every replQueueInterval milliseconds
         or when the replication queue has exceeded certain size.
         -->
         <async useReplQueue="true"
                replQueueInterval="10000"
                replQueueMaxElements="500"
                asyncMarshalling="false"
                />

      </clustering>

   </namedCache>

   <namedCache name="samplePersistedCache">

      <!--
      Cache loaders.

      If passivation is enabled, state is offloaded to the cache loaders ONLY when evicted.  Similarly, when the state
      is accessed again, it is removed from the cache loaderold and loaded into memory.

      Otherwise, state is always maintained in the cache loaderold as well as in memory.

      Set 'shared' to true if all instances in the cluster use the same cache loaderold instance, e.g., are talking to the
      same database.

      If "preload" is true, all keys are loaded from the cache loaderold into memory upon starting the cache.

      We can have multiple cache loaders, which get chained
      -->
      
      <loaders passivation="false"
               shared="false"
               preload="true">

         <loader class="org.infinispan.loaders.file.FileCacheStore"
                 fetchPersistentState="false"
                 ignoreModifications="false"
                 purgeOnStartup="false">

            <properties>
               <property name="location"
                         value="${java.io.tmpdir}"
                         />
            </properties>

            <async enabled="false" />
         </loader>
      </loaders>
      
   </namedCache>

</infinispan>
